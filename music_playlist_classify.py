import streamlit as st
import librosa
import joblib
import pandas as pd
import numpy as np
import yt_dlp
import os
import matplotlib.pyplot as plt
import librosa.display
import time

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏•‡∏∞‡∏™‡πÄ‡∏Å‡∏•‡πÄ‡∏•‡∏≠‡∏£‡πå
model = joblib.load(r"C:\Users\Cinnamorix\Downloads\osPJ\playlist_classifier_model.joblib")
scaler = joblib.load(r"C:\Users\Cinnamorix\Downloads\osPJ\scaler.joblib")

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô‡∏î‡∏∂‡∏á‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏û‡∏•‡∏á
def extract_features(y, sr, filename, genre):
    try:
        tempo, _ = librosa.beat.beat_track(y=y, sr=sr)
        pitch = librosa.yin(y, fmin=60, fmax=400, sr=sr).mean()
        mfcc = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=13)
        mfcc_mean = mfcc.mean(axis=1)

        row = {
            "bpm": tempo,
            "pitch": pitch,
        }
        for i, val in enumerate(mfcc_mean):
            row[f"mfcc_{i}"] = val

        return row
    except Exception as e:
        print(f"‚ùå Feature extraction failed for {filename}: {e}")
        return None

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏û‡∏•‡∏á‡∏à‡∏≤‡∏Å YouTube ‡∏î‡πâ‡∏ß‡∏¢ yt-dlp
def download_youtube_audio(url, save_filename="downloaded_song"):
    try:
        # ‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå .py ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ô
        current_directory = os.path.dirname(os.path.realpath(__file__))
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
        save_path = os.path.join(current_directory, save_filename)
        
        # ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
        ydl_opts = {
            'format': 'bestaudio/best',  # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
            'outtmpl': save_path,  # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå
            'noplaylist': True,  # ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Playlist
            'ffmpeg_location': r'C:\ffmpeg\bin',  # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ç‡∏≠‡∏á FFmpeg
            'postprocessors': [{  # ‡πÉ‡∏ä‡πâ‡πÇ‡∏õ‡∏£‡πÄ‡∏ã‡∏™‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡πá‡∏ô .wav
                'key': 'FFmpegExtractAudio',
                'preferredcodec': 'wav',  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå .wav
                'preferredquality': '192',
            }]
        }
        
        # ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            ydl.download([url])
        
        return f"{save_path}.wav"
    
    except Exception as e:
        st.error(f"‚ùå Failed to download from YouTube: {e}")
        return None


# ‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏¥‡∏ô‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÄ‡∏ü‡∏ã‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏õ
st.title("üéµ Music Playlist Classifier")

st.write(
    "Upload an audio file (MP3, WAV) or provide a YouTube URL to classify it into a suggested playlist."
)

# ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£
option = st.selectbox("Select an option", ("Upload Audio File", "Use YouTube URL"))

if option == "Upload Audio File":
    # ‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏û‡∏•‡∏á‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    uploaded_file = st.file_uploader("Choose a song file", type=["mp3", "wav"])
    start_time = time.time()
    if uploaded_file is not None:
        try:
            # ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏û‡∏•‡∏á
            y_full, sr = librosa.load(uploaded_file, sr=None)
            y = y_full[:len(y_full) // 2]  # ‡πÉ‡∏ä‡πâ‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏û‡∏•‡∏á


            # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á
            st.audio(uploaded_file, format='audio/wav')
            
            # ‡πÅ‡∏™‡∏î‡∏á waveform ‡∏Ç‡∏≠‡∏á‡πÄ‡∏û‡∏•‡∏á
            st.subheader("Waveform of the song")
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á figure ‡πÅ‡∏•‡∏∞ axes
            fig, ax = plt.subplots(figsize=(10, 4))
            librosa.display.waveshow(y, sr=sr, ax=ax)
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü
            st.pyplot(fig)

            # ‡∏î‡∏∂‡∏á‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏à‡∏≤‡∏Å‡πÄ‡∏û‡∏•‡∏á
            song_features = extract_features(y, sr, uploaded_file.name, "Unknown")
            
            if song_features:
                # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô DataFrame
                song_features_df = pd.DataFrame([song_features])

                # ‡∏™‡πÄ‡∏Å‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                song_scaled = scaler.transform(song_features_df)

                # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•
                result = model.predict(song_scaled)
                st.write(f"üéß Suggested Playlist: {result[0]}")

                # ‡πÅ‡∏™‡∏î‡∏á‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå
                st.subheader("Extracted Features")
                st.write(song_features_df)
                end_time = time.time()
                duration = end_time - start_time
                st.success(f"‚è±Ô∏è Total processing time: {duration:.2f} seconds")

        except Exception as e:
            st.error(f"‚ùå Error processing the audio file: {e}")

elif option == "Use YouTube URL":
    youtube_url = st.text_input("Enter YouTube URL")

    if youtube_url:
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤
        start_time = time.time()

        st.write("Downloading song...")
        downloaded_file_path = download_youtube_audio(youtube_url)
        
        if downloaded_file_path:
            try:    
                y_full, sr = librosa.load(downloaded_file_path, sr=None)
                y = y_full[:len(y_full) // 2]  # ‡πÉ‡∏ä‡πâ‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏û‡∏•‡∏á

                st.audio(downloaded_file_path, format='audio/mp4')

                st.subheader("Waveform of the song")
                fig, ax = plt.subplots(figsize=(10, 4))
                librosa.display.waveshow(y, sr=sr, ax=ax)
                st.pyplot(fig)
                
                song_features = extract_features(y, sr, downloaded_file_path, "Unknown")
                
                if song_features:
                    song_features_df = pd.DataFrame([song_features])
                    song_scaled = scaler.transform(song_features_df)
                    result = model.predict(song_scaled)
                    st.write(f"üéß Suggested Playlist: {result[0]}")
                    st.subheader("Extracted Features")
                    st.write(song_features_df)

                    # ‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å predict ‡πÄ‡∏™‡∏£‡πá‡∏à
                    end_time = time.time()
                    duration = end_time - start_time
                    st.success(f"‚è±Ô∏è Total processing time: {duration:.2f} seconds")

                os.remove(downloaded_file_path)

            except Exception as e:
                st.error(f"‚ùå Error processing the YouTube audio: {e}")